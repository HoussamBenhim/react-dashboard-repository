{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\Javascript\\\\reactExemples\\\\dashboard\\\\src\\\\Chart\\\\GeoChart.js\";\nimport React, { Component, useRef, useEffect, useState } from 'react';\nimport { select, selectAll, geoMercator, geoPath, min, max, scaleLinear } from 'd3';\nimport useResizeObserver from \"use-resize-observer\";\n\nfunction GeoChart({\n  data,\n  property,\n  countries\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoudingClientRect();\n    const projection = geoMercator().fitSize([650, 270], selectedCountry || data).precision(1000);\n    const geoPathGenerator = geoPath().projection(projection); // const minProp = min(data.features, feature=>feature.properties[property])\n    // const maxProp = max(data.features, feature=>feature.properties[property])\n    // const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#ccc\",\"red\"]);\n\n    svg.selectAll(\".country\").data(data.features).join('path').on('click', feature => {\n      selectedCountry ? setSelectedCountry(null) : setSelectedCountry(feature);\n    }).attr('class', 'country').transition().duration(1000).attr('fill', feature => countries[feature.properties[property]] ? '#B6C512' : 'black').attr('d', feature => geoPathGenerator(feature));\n    svg.selectAll('.Label').data([selectedCountry]).join('text').attr('class', 'label').text(feature => feature && feature.properties.name + ' : ' + feature.properties[preperty]).attr('x', 10).attr('y', 25);\n  }, [data, dimensions, property, selectedCountry]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      margin: '5px 0px 0px 0px',\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    style: {\n      margin: '0px 0px 0px 0px',\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default GeoChart;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/Javascript/reactExemples/dashboard/src/Chart/GeoChart.js"],"names":["React","Component","useRef","useEffect","useState","select","selectAll","geoMercator","geoPath","min","max","scaleLinear","useResizeObserver","GeoChart","data","property","countries","svgRef","wrapperRef","dimensions","selectedCountry","setSelectedCountry","svg","current","width","height","getBoudingClientRect","projection","fitSize","precision","geoPathGenerator","features","join","on","feature","attr","transition","duration","properties","text","name","preperty","margin"],"mappings":"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","sourcesContent":["import React, { Component, useRef, useEffect, useState } from 'react';\r\nimport {select,selectAll, geoMercator,  geoPath, min , max , scaleLinear} from 'd3'\r\nimport useResizeObserver from \"use-resize-observer\";\r\n\r\n\r\nfunction GeoChart({ data, property, countries }) {\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    const [selectedCountry, setSelectedCountry] =useState(null);\r\n\r\n\r\n    useEffect(()=>{\r\n        const svg = select(svgRef.current);\r\n        const {width, height} = dimensions || wrapperRef.current.getBoudingClientRect();\r\n        const projection = geoMercator().fitSize([650,270], \r\n            selectedCountry || data).precision(1000);\r\n        const geoPathGenerator = geoPath().projection(projection);\r\n        \r\n        // const minProp = min(data.features, feature=>feature.properties[property])\r\n        // const maxProp = max(data.features, feature=>feature.properties[property])\r\n        // const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#ccc\",\"red\"]);\r\n        \r\n\r\n        svg\r\n        .selectAll(\".country\")\r\n        .data(data.features).join('path')\r\n        .on('click', feature=>{\r\n           selectedCountry ? setSelectedCountry(null):  setSelectedCountry(feature)})\r\n        .attr('class','country')\r\n        .transition()\r\n        .duration(1000)\r\n        .attr('fill', feature => countries[feature.properties[property]] ? '#B6C512' :'black')\r\n        .attr('d',feature=> geoPathGenerator(feature));\r\n\r\n\r\n        svg\r\n        .selectAll('.Label')\r\n        .data([selectedCountry])\r\n        .join('text')\r\n        .attr('class', 'label')\r\n        .text(\r\n            feature => feature && feature.properties.name + ' : ' +  feature.properties[preperty]\r\n        )\r\n        .attr('x', 10)\r\n        .attr('y', 25)\r\n\r\n    }, [data, dimensions, property,selectedCountry ]);\r\n\r\n\r\n    return (\r\n    <div ref={wrapperRef} style={{margin:'5px 0px 0px 0px', width:'100%',  height:'100%'}}  > \r\n        <svg ref={svgRef} style={{margin:'0px 0px 0px 0px', width:'100%',  height:'100%'}}></svg>\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\nexport default GeoChart;"]},"metadata":{},"sourceType":"module"}