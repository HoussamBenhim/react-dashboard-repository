{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\Javascript\\\\reactExemples\\\\dashboard\\\\src\\\\Chart\\\\GeoChart.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport { select, geoMercator, geoPath } from 'd3';\nimport useResizeObserver from \"use-resize-observer\";\n\nfunction GeoChart({\n  data,\n  property,\n  countries\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  useEffect(() => {\n    const svg = select(svgRef.current); //const {width, height} = dimensions || wrapperRef.current.getBoudingClientRect();\n\n    const projection = geoMercator().fitSize([650, 270], selectedCountry || data).precision(1000);\n    const geoPathGenerator = geoPath().projection(projection); // const minProp = min(data.features, feature=>feature.properties[property])\n    // const maxProp = max(data.features, feature=>feature.properties[property])\n    // const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#ccc\",\"red\"]);\n\n    svg.selectAll(\".country\").data(data.features).join('path').on('click', feature => {\n      !selectedCountry ? setSelectedCountry(feature) : setSelectedCountry(null);\n      console.log(selectedCountry);\n    }).attr('class', 'country').transition().duration(1000).attr('fill', feature => countries[feature.properties[property]] ? '#B6C512' : 'black').attr('d', feature => geoPathGenerator(feature));\n    svg.selectAll('.Label').data([selectedCountry]).join('text').attr('class', 'label').text(feature => selectedCountry ? feature.properties.name + ' : ' + feature.properties[property] : '').attr('fill', 'white').attr('x', 10).attr('y', 25);\n  }, [data, dimensions, property, selectedCountry]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      margin: '5px 0px 0px 0px',\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    style: {\n      margin: '0px 0px 0px 0px',\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default GeoChart;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/Javascript/reactExemples/dashboard/src/Chart/GeoChart.js"],"names":["React","useRef","useEffect","useState","select","geoMercator","geoPath","useResizeObserver","GeoChart","data","property","countries","svgRef","wrapperRef","dimensions","selectedCountry","setSelectedCountry","svg","current","projection","fitSize","precision","geoPathGenerator","selectAll","features","join","on","feature","console","log","attr","transition","duration","properties","text","name","margin","width","height"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { select, geoMercator, geoPath } from 'd3'\r\nimport useResizeObserver from \"use-resize-observer\";\r\n\r\n\r\nfunction GeoChart({ data, property, countries }) {\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    const [selectedCountry, setSelectedCountry] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        const svg = select(svgRef.current);\r\n        //const {width, height} = dimensions || wrapperRef.current.getBoudingClientRect();\r\n        const projection = geoMercator().fitSize([650, 270],\r\n            selectedCountry || data).precision(1000);\r\n        const geoPathGenerator = geoPath().projection(projection);\r\n\r\n        // const minProp = min(data.features, feature=>feature.properties[property])\r\n        // const maxProp = max(data.features, feature=>feature.properties[property])\r\n        // const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#ccc\",\"red\"]);\r\n\r\n\r\n        svg\r\n            .selectAll(\".country\")\r\n            .data(data.features).join('path')\r\n            .on('click', feature => {\r\n\r\n                !selectedCountry ? setSelectedCountry(feature) : setSelectedCountry(null)\r\n\r\n                console.log(selectedCountry );\r\n                \r\n            })\r\n            .attr('class', 'country')\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('fill', feature => countries[feature.properties[property]] ? '#B6C512' : 'black')\r\n            .attr('d', feature => geoPathGenerator(feature));\r\n\r\n\r\n        svg\r\n            .selectAll('.Label')\r\n            .data([selectedCountry])\r\n            .join('text')\r\n            .attr('class', 'label')\r\n            .text(\r\n                feature => selectedCountry ? feature.properties.name + ' : ' + feature.properties[property] : ''\r\n            )\r\n            .attr('fill', 'white')\r\n            .attr('x', 10)\r\n            .attr('y', 25)\r\n\r\n    }, [data, dimensions, property, selectedCountry]);\r\n\r\n\r\n    return (\r\n        <div ref={wrapperRef} style={{ margin: '5px 0px 0px 0px', width: '100%', height: '100%' }}  >\r\n            <svg ref={svgRef} style={{ margin: '0px 0px 0px 0px', width: '100%', height: '100%' }}></svg>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default GeoChart;"]},"metadata":{},"sourceType":"module"}