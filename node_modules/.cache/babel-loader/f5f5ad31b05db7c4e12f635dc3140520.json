{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\Javascript\\\\reactExemples\\\\dashboard\\\\src\\\\Chart\\\\GeoChart.js\";\nimport React, { Component, useRef, useEffect } from 'react';\nimport { select, selectAll, geoMercator, geoPath, min, max, scaleLinear } from 'd3';\nimport useResizeObserver from \"use-resize-observer\";\n\nfunction GeoChart({\n  data,\n  property\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoudingClientRect();\n    const projection = geoMercator().fitSize([680, 270], data);\n    const geoPathGenerator = geoPath().projection(projection); // const minProp = min(data.features, feature=>feature.properties[property])\n    // const maxProp = max(data.features, feature=>feature.properties[property])\n    // const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#ccc\",\"red\"]);\n\n    svg.selectAll(\".country\").data(data.features).join('path').attr('class', 'country').attr('fill', feature => feature.properties[property] === \"FR\" ? 'red' : '#ccc').attr('d', feature => geoPathGenerator(feature));\n  }, [data, dimensions, property]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      margin: '5px 0px 0px 0px',\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    style: {\n      margin: '0px 0px 0px 0px',\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default GeoChart;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/Javascript/reactExemples/dashboard/src/Chart/GeoChart.js"],"names":["React","Component","useRef","useEffect","select","selectAll","geoMercator","geoPath","min","max","scaleLinear","useResizeObserver","GeoChart","data","property","svgRef","wrapperRef","dimensions","svg","current","width","height","getBoudingClientRect","projection","fitSize","geoPathGenerator","features","join","attr","feature","properties","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,SAAnC,QAAoD,OAApD;AACA,SAAQC,MAAR,EAAeC,SAAf,EAA0BC,WAA1B,EAAwCC,OAAxC,EAAiDC,GAAjD,EAAuDC,GAAvD,EAA6DC,WAA7D,QAA+E,IAA/E;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAGA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAlB,EAAsC;AAClC,QAAMC,MAAM,GAAGb,MAAM,EAArB;AACA,QAAMc,UAAU,GAAGd,MAAM,EAAzB;AACA,QAAMe,UAAU,GAAGN,iBAAiB,CAACK,UAAD,CAApC;AAIAb,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMe,GAAG,GAAGd,MAAM,CAACW,MAAM,CAACI,OAAR,CAAlB;AACA,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAkBJ,UAAU,IAAID,UAAU,CAACG,OAAX,CAAmBG,oBAAnB,EAAtC;AACA,UAAMC,UAAU,GAAGjB,WAAW,GAAGkB,OAAd,CAAsB,CAAC,GAAD,EAAK,GAAL,CAAtB,EAAiCX,IAAjC,CAAnB;AACA,UAAMY,gBAAgB,GAAGlB,OAAO,GAAGgB,UAAV,CAAqBA,UAArB,CAAzB,CAJU,CAMV;AACA;AACA;;AAGAL,IAAAA,GAAG,CACFb,SADD,CACW,UADX,EAECQ,IAFD,CAEMA,IAAI,CAACa,QAFX,EAEqBC,IAFrB,CAE0B,MAF1B,EAGCC,IAHD,CAGM,OAHN,EAGc,SAHd,EAICA,IAJD,CAIM,MAJN,EAIcC,OAAO,IAAIA,OAAO,CAACC,UAAR,CAAmBhB,QAAnB,MAA+B,IAA/B,GAAsC,KAAtC,GAA6C,MAJtE,EAKCc,IALD,CAKM,GALN,EAKUC,OAAO,IAAGJ,gBAAgB,CAACI,OAAD,CALpC;AAOH,GAlBQ,EAkBN,CAAChB,IAAD,EAAOI,UAAP,EAAmBH,QAAnB,CAlBM,CAAT;AAqBA,sBACA;AAAK,IAAA,GAAG,EAAEE,UAAV;AAAsB,IAAA,KAAK,EAAE;AAACe,MAAAA,MAAM,EAAC,iBAAR;AAA2BX,MAAAA,KAAK,EAAC,MAAjC;AAA0CC,MAAAA,MAAM,EAAC;AAAjD,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,GAAG,EAAEN,MAAV;AAAkB,IAAA,KAAK,EAAE;AAACgB,MAAAA,MAAM,EAAC,iBAAR;AAA2BX,MAAAA,KAAK,EAAC,MAAjC;AAA0CC,MAAAA,MAAM,EAAC;AAAjD,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADA;AAMH;;AAED,eAAeT,QAAf","sourcesContent":["import React, { Component, useRef, useEffect } from 'react';\r\nimport {select,selectAll, geoMercator,  geoPath, min , max , scaleLinear} from 'd3'\r\nimport useResizeObserver from \"use-resize-observer\";\r\n\r\n\r\nfunction GeoChart({ data, property }) {\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        const svg = select(svgRef.current);\r\n        const {width, height} = dimensions || wrapperRef.current.getBoudingClientRect();\r\n        const projection = geoMercator().fitSize([680,270], data);\r\n        const geoPathGenerator = geoPath().projection(projection);\r\n        \r\n        // const minProp = min(data.features, feature=>feature.properties[property])\r\n        // const maxProp = max(data.features, feature=>feature.properties[property])\r\n        // const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#ccc\",\"red\"]);\r\n        \r\n\r\n        svg\r\n        .selectAll(\".country\")\r\n        .data(data.features).join('path')\r\n        .attr('class','country')\r\n        .attr('fill', feature => feature.properties[property]===\"FR\" ? 'red' :'#ccc')\r\n        .attr('d',feature=> geoPathGenerator(feature));\r\n\r\n    }, [data, dimensions, property ]);\r\n\r\n\r\n    return (\r\n    <div ref={wrapperRef} style={{margin:'5px 0px 0px 0px', width:'100%',  height:'100%'}}  > \r\n        <svg ref={svgRef} style={{margin:'0px 0px 0px 0px', width:'100%',  height:'100%'}}></svg>\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\nexport default GeoChart;"]},"metadata":{},"sourceType":"module"}